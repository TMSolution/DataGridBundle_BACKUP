<?php 
/**
 * Copyright (c) 2014, TMSolution
 * All rights reserved.
 *
 * For the full copyright and license information, please view
 * the file LICENSE.md that was distributed with this source code.
 */
namespace  {{gridConfigNamespaceName}};

use APY\DataGridBundle\Grid\Export\ExcelExport;
use APY\DataGridBundle\Grid\Export\CSVExport;
use APY\DataGridBundle\Grid\Export\XMLExport;
use TMSolution\DataGridBundle\Grid\Column\NumberColumn;
use TMSolution\DataGridBundle\Grid\Column\TextColumn;
use TMSolution\DataGridBundle\Grid\Action\RowAction;
use TMSolution\DataGridBundle\GridBuilder\GridBuilder;

/**
 * GridConifg  for '{{entityName}}'.
 *
 * Generated with {@see TMSolution\GridBundle\Command\GridConfigCommand}.
 */
class {{objectName}} extends GridBuilder
{

    public function buildGrid($grid)
    {
        /**
        * Uncomment to use method
        */
        
        //$this->manipulateQuery($grid);
        ///$this->configureColumn($grid);
        //$this->configureFilter($grid);
        //$this->configureExport($grid);
        //$this->configureRowButton($grid);
        
        return $grid;
    }
    
   protected function manipulateQuery($grid)
    {
      $tableAlias = $grid->getSource()->getTableAlias();
      $queryFn = function ($query) use($tableAlias) {
        $query->select({% for field, fieldParam in fieldsInfo %}{% if loop.last %}$tableAlias.'.{{field}}'{% else %}$tableAlias.'.{{field}},'.{% endif %}{% endfor %});
        };
      $grid->getSource()->manipulateQuery($queryFn);
    }

    protected function configureColumn($grid)
    {
    
     {% for field, fieldParam in fieldsInfo %}{% if loop.first %}
$grid->setDefaultOrder('{{field}}', 'asc');
{% endif %}{% endfor %}
     $grid->setVisibleColumns([{% for field, fieldParam in fieldsInfo %}{% if loop.last %}'{{field}}'{% else %}'{{field}}',{% endif %}{% endfor %}]);
     $grid->setColumnsOrder([{% for field, fieldParam in fieldsInfo %}{% if loop.last %}'{{field}}'{% else %}'{{field}}',{% endif %}{% endfor %}]);
    
    {% for field, fieldParam in fieldsInfo %}
/** field {{field}} configuration */    
    /*
    $column = $grid->getColumn('{{field}}');
    $column->manipulateRenderCell(function($value, $row) {
    return $value;
          });
    $column->setTitle('{{objectName}}.{{field}}');
    */
    
    {% endfor %}  

    }

    protected function configureFilter($grid)
    {
          /** filter columns [blocks]*/      
          $grid->setNumberPresentedFilterColumn(3);
          $grid->setShowFilters([{% for field, fieldParam in fieldsInfo %}{% if loop.last %}'{{field}}'{% else %}'{{field}}',{% endif %}{% endfor %}]);
          
    }

    protected function configureExport($grid)
    {
           
          $grid->addExport(new ExcelExport($this->exports['Excel']));
          $grid->addExport(new CSVExport($this->exports['CSV']));
          $grid->addExport(new XMLExport($this->exports['XML']));
          
    
    }

    protected function configureRowButton($grid)
    {

        $rowAction = new RowAction('some_font', 'core_prototype_defaultcontroller_read', false, null, ['id' => 'button-id', 'class' => 'button-class', 'data-original-title' => 'Show']);
        $rowAction->setRouteParameters(['entityName' => '{{objectName|lower}}','id']);
        $grid->addRowAction($rowAction);
    
        $rowAction = new RowAction('some_font', 'core_prototype_defaultcontroller_update', false, null, ['id' => 'button-id', 'class' => 'button-class', 'data-original-title' => 'Edit']);
        $rowAction->setRouteParameters(['entityName' => '{{objectName|lower}}','id']);
        $grid->addRowAction($rowAction);
        
        $rowAction = new RowAction('some_font', 'core_prototype_defaultcontroller_delete', false, null, ['id' => 'button-id', 'class' => 'button-class', 'data-original-title' => 'Delete']);
        $rowAction->setRouteParameters(['entityName' => '{{objectName|lower}}','id']);
        $grid->addRowAction($rowAction);
    }

}

